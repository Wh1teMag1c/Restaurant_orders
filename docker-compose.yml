version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    networks:
      - app-network
    labels:
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.middlewares.frontend-stripprefix.stripprefix.prefixes=/"
      - "traefik.http.routers.frontend.middlewares=frontend-stripprefix"

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    depends_on:
      - backend
    networks:
      - app-network
    labels:
      - "traefik.http.routers.admin.rule=PathPrefix(`/admin`)"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      - "traefik.http.middlewares.admin-stripprefix.stripprefix.prefixes=/admin"
      - "traefik.http.routers.admin.middlewares=admin-stripprefix"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      JWT_SECRET: random#secret
      DB_USER: main_admin
      DB_HOST: db
      DB_NAME: restaurant_db
      DB_PASSWORD: Wh1te123
      DB_PORT: 5432
      PORT: 5000
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.http.routers.admin.rule=PathPrefix(`/admin`)"
      - "traefik.http.services.admin.loadbalancer.server.port=80"

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: main_admin
      POSTGRES_PASSWORD: Wh1te123
      POSTGRES_DB: restaurant_db
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - app-network

  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8081:8080"
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
      - admin
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db-data:

networks:
  app-network:
    driver: bridge
